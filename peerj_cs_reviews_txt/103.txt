Review History for SymPy: symbolic computing in Python [PeerJ]
PeerJ Computer Science PeerJ – the Journal of Life & Environmental Sciences PeerJ Computer Science PeerJ Physical Chemistry PeerJ Organic Chemistry PeerJ Inorganic Chemistry PeerJ Analytical Chemistry PeerJ Materials Science Visit PeerJ.org and get involved About PeerJ Journals Overview PeerJ Journals FAQ What we publish 5 Years publishing Solutions for authors Reputation High quality peer review Fast publishing Indexing and Impact Factor Global readership Feature comparison Reduced cost publishing Author feedback Early career researcher benefits Senior researcher benefits Open review (optional) Rebuttal letters Sections About the journal Sections Aquatic Biology Biochemistry, Biophysics and Molecular Biology Biodiversity and Conservation Bioinformatics and Genomics Brain and Cognition Ecology Environmental Science Microbiology Paleontology and Evolutionary Science Plant Biology Zoological Science About PeerJ Journals Overview PeerJ Journals FAQ What we publish 5 Years publishing Solutions for authors Reputation High quality peer review Fast publishing Indexing and Impact Factor Global readership Feature comparison Reduced cost publishing Author feedback Early career researcher benefits Senior researcher benefits Open review (optional) Rebuttal letters More Subjects Search articles Peer-reviewed Journals PeerJ (Life, Biological, Environmental and Health Sciences) PeerJ Computer Science PeerJ Physical Chemistry PeerJ Organic Chemistry PeerJ Inorganic Chemistry PeerJ Analytical Chemistry PeerJ Materials Science Preprints PeerJ Preprints Table of contents Table of Contents - current and archives PeerJ - Medicine articles PeerJ - Biology & Life science articles PeerJ - Environmental Science articles PeerJ - General bio (stats, legal, policy, edu) PeerJ Computer Science PeerJ Preprints Academic advisors Volunteer to review Collections Job listings Discussions Blog Institutional plans Reviews and awards Spread the word Who are we? Contact Login AUTHORS Peer Journals Overview Submission Guidelines Subject Areas Editorial Board Editorial Criteria Pricing General FAQ Computer Science FAQ Aims and Scope Author Interviews Policies and Procedures SUBMIT ARTICLE
Review History SymPy: symbolic computing in Python To increase transparency, PeerJ operates a system of 'optional signed reviews and history'. This takes two forms: (1) peer reviewers are encouraged, but not required, to provide their names (if they do so, then their profile page records the articles they have reviewed), and (2) authors are given the option of reproducing their entire peer review history alongside their published article (in which case the complete peer review process is provided, including revisions, rebuttal letters and editor decision letters). New to public reviews? Learn more about optional signed reviews and how to write a better rebuttal letter .
Summary
The initial submission of this article was received on June 22nd, 2016 and was peer-reviewed by 3 reviewers and the Academic Editor. The Academic Editor made their initial decision on August 1st, 2016. The first revision was submitted on October 12th, 2016 and was reviewed by 2 reviewers and the Academic Editor. A further revision was submitted on November 18th, 2016 and was reviewed by the Academic Editor. The article was Accepted by the Academic Editor on November 21st, 2016.
label_version_1
Version 0.3 (accepted)
Nick Higham
·
Nov 21, 2016
label_recommendation_1
·
Academic Editor
Accept
Thank you for the careful revision. I'm delighted to accept the manuscript for publication. Can you please check whether the author name "AMiT Kumar" has been entered correctly, as the capitalization is unusual.
Download Version 0.3 (PDF)
Download author's rebuttal letter
- submitted Nov 18, 2016
label_version_2
Version 0.2
Nick Higham
·
Oct 17, 2016
label_recommendation_2
·
Academic Editor
Minor Revisions
In addition to the minor comments of Reviewer 1, please see the comments in the PDF file that I have uploaded.
Download annotated manuscript
label_author_1
Vedran Sego ·
Oct 16, 2016
Basic reporting
label_br_1
The structure of the paper and the supplement is now improved, compared to the original submission, and the materials are now much easier to read and comprehend.
Experimental design
label_ed_1
No Comments
Validity of the findings
label_votf_1
No Comments
Comments for the author
label_cfta_1
The paper The abstract and the paper itself mention the paper's supplement in several places. I believe it would be beneficial to add a short paragraph, possibly after line 90, that would list the supplement's contents in a manner similar to that of the paper's contents (lines 83-90), with the list submodules, to make it easier for an interested reader to find their way around it. In line 323, it should say "...meaning that the entries...". In line 673, it should say either "poorer than that of its commercial competitors" or "poorer than its commercial competitors'" (ending in apostrophe). In line 813, one "PhD thesis" seems to be superficial. The supplement Figure 1 is hard to read. I suggest putting the labels on the outside of the loops. Figure 2 has the wrong link towards SymPy Gamma's computation of `tan(x)` instead of `integrate(tan(x))`. Cite this review as
Sego V ( 2017 ) Peer Review #1 of "SymPy: symbolic computing in Python (v0.2)" . PeerJ Computer Science https://doi.org/10.7287/peerj-cs.103v0.2/reviews/1
label_author_2
Michael Croucher ·
Oct 12, 2016
Basic reporting
label_br_2
No comments.
Experimental design
label_ed_2
No comments.
Validity of the findings
label_votf_2
No comments.
Comments for the author
label_cfta_2
This is a great paper. Thank you for addressing my concerns. Cite this review as
Croucher M ( 2017 ) Peer Review #2 of "SymPy: symbolic computing in Python (v0.2)" . PeerJ Computer Science https://doi.org/10.7287/peerj-cs.103v0.2/reviews/2 Download Version 0.2 (PDF)
Download author's rebuttal letter
- submitted Oct 12, 2016
label_version_3
Version 0.1 (original submission)
Nick Higham
·
Aug 1, 2016
label_recommendation_3
·
Academic Editor
Major Revisions
I have obtained three reports on the manuscript and have also attached a short PDF note from me with some further comments. One of the referees suggests the paper is not in the scope of the journal. I can confirm that it is in scope, but please consider this referee's other comments of course. The other two referees like the paper but have a number of suggestions that need addressing. One referee (the PDF file) has provided a very detailed report that makes many perceptive comments that I believe will help you to improve the manuscript substantially. In particular, this referee suggests some reorganization and expansion that I think will benefit the manuscript. Please use your judgement in deciding how to respond to these suggestions. I look forward to receiving a revised version of the manuscript that addresses the points in the reports.
Download annotated manuscript
label_author_3
Vedran Sego ·
Jul 7, 2016
Basic reporting
label_br_3
Please, see the review.
Experimental design
label_ed_3
Please, see the review.
Validity of the findings
label_votf_3
This category doesn't apply as this is a technical report and not a research paper. Further, it doesn't deal with any data nor it has findings of its own.
Download annotated manuscript Cite this review as
Sego V ( 2017 ) Peer Review #1 of "SymPy: symbolic computing in Python (v0.1)" . PeerJ Computer Science https://doi.org/10.7287/peerj-cs.103v0.1/reviews/1
label_author_4
Michael Croucher ·
Jul 16, 2016
Basic reporting
label_br_4
No Comments.
Experimental design
label_ed_4
No Comments
Validity of the findings
label_votf_4
There is a minor problem with the supplementary notebook The final cell is >>> circuit_plot(fourier, nqubits=3); plt.savefig('./images/circuitplot-qft.pdf', format='pdf') This fails if the user does not have an images folder. I suggest removing the >>> before each line. It looks strange in a notebook.
Comments for the author
label_cfta_4
Sympy is a superb package and I am happy to see that there is now a paper that describes its current state. Here are a few comments that you may wish to consider before publication. Line 105 It is generally frowned upon to import all symbols from a Python module in this manner. I understand why you are doing it in this paper, it makes subsequent sympy commands less verbose. It might, however, encourage bad practice. It may also lead to a poor user experience for newbies. For example, say I had the following code ``` from numpy import sin,array test = array([1,2,3]) sin(test) ``` I decide that I want to use sympy for something and, following your example, do ``` from numpy import sin,array from sympy import * test = array([1,2,3]) sin(test) x, y, z = symbols('x y z') ``` The code will break because sympy has it's own sin that gets imported that doesn't work on numpy arrays. As a newbie, I might not know this. I tested using Sympy 1.0 and Python 3. Later in the text, a similar assertion is made by you (line 485) in reference to a different package that may break sympy. Lines 151-153 Minor comment: srepr is a useful command. As someone who also uses Mathematica, I wonder if there is a sympy version of the TreeForm command which produces a visualisation of the expression tree, or maybe an output format that I could pass to a graph library for visualisation? Section 2.3 - Assumptions Is there a way of the user listing all available assumptions? Section 2.4 Line 216 - This is due in part because the same language, Python, is used both for the internal implementation and the external usage by users. This reads badly. Perhaps the following might be better? This is due, in part, to the fact that the same language, Python, is used both for the internal implementation and the external usage by users. Line 221: the phrase 'Expression tree' is cited but this is not the first time you've used it. Perhaps cite earlier? Line 129 perhaps? Page 8: Footnote 5 The line reads The measure parameter of the simplify function lets specify the Python function used to determine how should this be.. The measure parameter of the simplify function lets the user specify the Python function used to determine how Section 4.1 Should mpmath be cited here? Cite this review as
Croucher M ( 2017 ) Peer Review #2 of "SymPy: symbolic computing in Python (v0.1)" . PeerJ Computer Science https://doi.org/10.7287/peerj-cs.103v0.1/reviews/2
label_author_5
James Davenport ·
Jul 30, 2016
Basic reporting
label_br_5
Generally good. A part that confused me is the assertion (footnote 3) that "If A and B are Symbols created with commutative=False then SymPy will keep A·B and B·A distinct." Does that mean that BOTH of them must be created this way, and that A and x (if x is created normally) will commute? Is there any way to declare commutators? How does one guarantee that other pieces of code, e.g. Gaussian elimination, respect non-commutativity? References reasonable, though [8], an excellent reference, makes almost precisely the opposite point to that for which it is cited - "simplification is not well-defined". I think the authors are trying to follow [8]'s definition of simplification.
Experimental design
label_ed_5
The referee is asked to comment whether the research is withinthe scope of the journal, defined as "PeerJ is an Open Access, peer-reviewed, scholarly journal. It considers articles in the Biological Sciences, Medical Sciences, and Health Sciences. PeerJ does not publish in the Physical Sciences, the Mathematical Sciences, the Social Sciences, or the Humanities (except where articles in those areas have clear applicability to the core areas of Biological, Medical or Health sciences)." Hence I fear a software description on the maths/cmputing boundary with no cited applications is out of scope.
Validity of the findings
There are no findings as such, since this is a software description, not an experimental paper.
Comments for the author
Nice paper - pity it seems totally out of scope. Why not J. Symbolic Computation or some such? Cite this review as
Davenport J ( 2017 ) Peer Review #3 of "SymPy: symbolic computing in Python (v0.1)" . PeerJ Computer Science https://doi.org/10.7287/peerj-cs.103v0.1/reviews/3 Download Original Submission (PDF)
- submitted Jun 22, 2016 All text and materials provided via this peer-review history page are made available under a Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.
About us - PeerJ team | Our publications | Benefits | Partnerships | Endorsements Awards Resources - FAQ | Careers | Pressroom | Terms of use | Privacy | Contact Academic boards - Advisors | Editors | Subject areas Follow us - PeerJ blog | Twitter | Facebook | LinkedIn | Pinterest Submission guides - PeerJ – Life and Environment | PeerJ Computer Science | PeerJ Chemistry Spread the word - Activities | Resources PeerJ feeds - Atom | RSS 1.0 | RSS 2.0 | JSON PeerJ Computer Science feeds - Atom | RSS 1.0 | RSS 2.0 | JSON Archives - PeerJ – Life and Environment | PeerJ Computer Science
©2012-2019 PeerJ, Inc | Public user content licensed CC BY 4.0 unless otherwise specified. PeerJ ISSN: 2167-8359 PeerJ Comput. Sci. ISSN: 2376-5992 PeerJ Preprints ISSN: 2167-9843
computer science
