Review History for Using cantor sets for error detection [PeerJ]
PeerJ Computer Science PeerJ – the Journal of Life & Environmental Sciences PeerJ Computer Science PeerJ Physical Chemistry PeerJ Organic Chemistry PeerJ Inorganic Chemistry PeerJ Analytical Chemistry PeerJ Materials Science Visit PeerJ.org and get involved About PeerJ Journals Overview PeerJ Journals FAQ What we publish 5 Years publishing Solutions for authors Reputation High quality peer review Fast publishing Indexing and Impact Factor Global readership Feature comparison Reduced cost publishing Author feedback Early career researcher benefits Senior researcher benefits Open review (optional) Rebuttal letters Sections About the journal Sections Aquatic Biology Biochemistry, Biophysics and Molecular Biology Biodiversity and Conservation Bioinformatics and Genomics Brain and Cognition Ecology Environmental Science Microbiology Paleontology and Evolutionary Science Plant Biology Zoological Science About PeerJ Journals Overview PeerJ Journals FAQ What we publish 5 Years publishing Solutions for authors Reputation High quality peer review Fast publishing Indexing and Impact Factor Global readership Feature comparison Reduced cost publishing Author feedback Early career researcher benefits Senior researcher benefits Open review (optional) Rebuttal letters More Subjects Search articles Peer-reviewed Journals PeerJ (Life, Biological, Environmental and Health Sciences) PeerJ Computer Science PeerJ Physical Chemistry PeerJ Organic Chemistry PeerJ Inorganic Chemistry PeerJ Analytical Chemistry PeerJ Materials Science Preprints PeerJ Preprints Table of contents Table of Contents - current and archives PeerJ - Medicine articles PeerJ - Biology & Life science articles PeerJ - Environmental Science articles PeerJ - General bio (stats, legal, policy, edu) PeerJ Computer Science PeerJ Preprints Academic advisors Volunteer to review Collections Job listings Discussions Blog Institutional plans Reviews and awards Spread the word Who are we? Contact Login AUTHORS Peer Journals Overview Submission Guidelines Subject Areas Editorial Board Editorial Criteria Pricing General FAQ Computer Science FAQ Aims and Scope Author Interviews Policies and Procedures SUBMIT ARTICLE
Review History Using cantor sets for error detection To increase transparency, PeerJ operates a system of 'optional signed reviews and history'. This takes two forms: (1) peer reviewers are encouraged, but not required, to provide their names (if they do so, then their profile page records the articles they have reviewed), and (2) authors are given the option of reproducing their entire peer review history alongside their published article (in which case the complete peer review process is provided, including revisions, rebuttal letters and editor decision letters). New to public reviews? Learn more about optional signed reviews and how to write a better rebuttal letter .
Summary
The initial submission of this article was received on October 11th, 2018 and was peer-reviewed by 3 reviewers and the Academic Editor. The Academic Editor made their initial decision on November 28th, 2018. The first revision was submitted on December 17th, 2018 and was reviewed by the Academic Editor. The article was Accepted by the Academic Editor on December 21st, 2018.
label_version_1
Version 0.2 (accepted)
Arun Somani
·
Dec 21, 2018
label_recommendation_1
·
Academic Editor
Accept
After reviewing your response, I believe that you have responded to reviewers comments adequately.
Download Version 0.2 (PDF)
Download author's rebuttal letter
- submitted Dec 17, 2018
label_version_2
Version 0.1 (original submission)
Arun Somani
·
Nov 28, 2018
label_recommendation_2
·
Academic Editor
Minor Revisions
The reviewers have made excellent suggestion that will help improve the quality and contents of the paper. I look forward to the revised version.
label_author_1
Reviewer 1 ·
Oct 30, 2018
Basic reporting
label_br_1
Few sentences can be rephrased:: ine 58:: demonstrate, Cantor set has desirable properties that enable efficient error detection while<with> GLS-decoding. line 61:: that enable error detection. Repetition codes are shown to lie on a Cantor set<sentence can be framed in a better way>. Inspired by this, we incorporate error detection into GLS-coding using a Cantor set in section 4 and show simulation results of the proposed method. We conclude with open challenging problems in section 5. < Para can be re-phrased> line 159 Repetition codes which are error detection/correction codes lie on a Cantor set. How can we extend this 160 idea of placing codewords on a Cantor set for GLS-coding? Here, we establish the connection between 161 repetition codes and GLS-coding. <Section heading can be re-phrased> 201 4.3 Error Detection while<with> GLS-Decoding line 202 : If while GLS decoding, the forbidden symbol ‘F’ is encountered can be rephrased as : <If the forbidden symbol 'F' is encountered during GLS decoding> line 215: The amount of redundancy that is added is easy to determine. can be rephrased to: <The amount of redundancy that needs to be added is easy to determine> line 226: this line can be re-phrased This is because, any error can only affect decoding for subsequent bits and if the error was towards the end-of-file (EoF), not many bits are available to catch it.
Experimental design
label_ed_1
4.4 Simulation Results The author did not mention the number of iterations, confidence interval
Validity of the findings
label_votf_1
no comment
Comments for the author
label_cfta_1
1) The novelty this paper is in identifying that Repetition codes are closely related to cantor sets. The author has done only preliminary experiments. Is it possible to do experiments on real workloads. What are the advantages/disadvantages of using this scheme? Under what conditions this scheme performs better? Under what conditions it does not perform well? 2) Can the author also estimate (quantify) the probability of undetected errors - they mention that it is non-zero for finite length messages. 3) Looks like the error model - here is a 1 bit error. They did not explicitly mention this. 4) Can the author compare the current technique with other existing techniques which provide the same amount of detection capability. For e.g parity can also detect single-bit errors. So, why should anyone use this particular approach if parity is better. Cite this review as
Anonymous Reviewer ( 2019 ) Peer Review #1 of "Using cantor sets for error detection (v0.1)" . PeerJ Computer Science https://doi.org/10.7287/peerj-cs.171v0.1/reviews/1
label_author_2
Reviewer 2 ·
Nov 1, 2018
Basic reporting
label_br_2
The description of the author's prior work on GLS coding is needlessly succinct. Unless there are page limit restrictions that need to be satisfied It should be expanded to at least include an example. The idea is straightforward enough that it really should not need much additional work. The use of a forbidden symbol was also used in Pettijohn et al. (2001) and should probably be included in section 4.5.
Experimental design
label_ed_2
no comment
Validity of the findings
label_votf_2
no comment
Comments for the author
label_cfta_2
Nice work! Cite this review as
Anonymous Reviewer ( 2019 ) Peer Review #2 of "Using cantor sets for error detection (v0.1)" . PeerJ Computer Science https://doi.org/10.7287/peerj-cs.171v0.1/reviews/2
label_author_3
Reviewer 3 ·
Nov 28, 2018
Basic reporting
label_br_3
The reporting is basically sound, but certain clarifications would be helpful to the reader. The map from source symbol to interval could be better illustrated and explained. START and END should be labeled or indicated in Fig. 1 or its caption. Initial value corresponding to '001' and number of bits to send it should be given. Why is reserving a width epsilon for a forbidden symbol ensure codewords lying on a Cantor set? I thought the Cantor set remains when middle third is repetitively removed. The properties of "totally disconnected" and "isolated points" are true of the Cantor set, where the middle third is repetitively removed ad infinitum. Clearly, that is impractical and sub-intervals containing points of the Cantor set remain. So a single bit error may not take the value outside the sub-interval in which it occurs. The error might be detected if follow a sufficient number of sub-divisions of that interval. I think an explanation along these lines would better clarify the reason why a later bit error may not be caught if not enough bits remain in the code sequence.
Experimental design
label_ed_3
I have no comments. All aspects are in order.
Validity of the findings
label_votf_3
The experimental findings look to be correct and support well the validity and efficacy of the method to detect bit errors. I am somewhat confused by the first column in Tables 2 and 3. This column gives ranges of distances of a single bit error from EOF. Since there is only one corresponding number for Detected and Undetected, it seems that these numbers count the Detected and Undetected errors in that range; and the bit error is inserted prior to the range's beginning point. If so, I suggest a change of column heading wording. Otherwise, everything else is clear.
Comments for the author
The paper is well-written and presents a novel scheme for continuous detection of transmission errors using GLS decoding. Please take into account the above comments. One additional minor matter: in 3.2, you mention correction of up to (n-1)/2 bit errors. Only true when n is odd, or change to floor( (n-1)/2 ). Cite this review as
Anonymous Reviewer ( 2019 ) Peer Review #3 of "Using cantor sets for error detection (v0.1)" . PeerJ Computer Science https://doi.org/10.7287/peerj-cs.171v0.1/reviews/3 Download Original Submission (PDF)
- submitted Oct 11, 2018 All text and materials provided via this peer-review history page are made available under a Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.
About us - PeerJ team | Our publications | Benefits | Partnerships | Endorsements Awards Resources - FAQ | Careers | Pressroom | Terms of use | Privacy | Contact Academic boards - Advisors | Editors | Subject areas Follow us - PeerJ blog | Twitter | Facebook | LinkedIn | Pinterest Submission guides - PeerJ – Life and Environment | PeerJ Computer Science | PeerJ Chemistry Spread the word - Activities | Resources PeerJ feeds - Atom | RSS 1.0 | RSS 2.0 | JSON PeerJ Computer Science feeds - Atom | RSS 1.0 | RSS 2.0 | JSON Archives - PeerJ – Life and Environment | PeerJ Computer Science
©2012-2019 PeerJ, Inc | Public user content licensed CC BY 4.0 unless otherwise specified. PeerJ ISSN: 2167-8359 PeerJ Comput. Sci. ISSN: 2376-5992 PeerJ Preprints ISSN: 2167-9843
computer science
