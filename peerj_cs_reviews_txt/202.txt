Review History for Steady state particle swarm [PeerJ]
PeerJ Computer Science PeerJ – the Journal of Life & Environmental Sciences PeerJ Computer Science PeerJ Physical Chemistry PeerJ Organic Chemistry PeerJ Inorganic Chemistry PeerJ Analytical Chemistry PeerJ Materials Science Visit PeerJ.org and get involved About PeerJ Journals Overview PeerJ Journals FAQ What we publish 5 Years publishing Solutions for authors Reputation High quality peer review Fast publishing Indexing and Impact Factor Global readership Feature comparison Reduced cost publishing Author feedback Early career researcher benefits Senior researcher benefits Open review (optional) Rebuttal letters Sections About the journal Sections Aquatic Biology Biochemistry, Biophysics and Molecular Biology Biodiversity and Conservation Bioinformatics and Genomics Brain and Cognition Ecology Environmental Science Microbiology Paleontology and Evolutionary Science Plant Biology Zoological Science About PeerJ Journals Overview PeerJ Journals FAQ What we publish 5 Years publishing Solutions for authors Reputation High quality peer review Fast publishing Indexing and Impact Factor Global readership Feature comparison Reduced cost publishing Author feedback Early career researcher benefits Senior researcher benefits Open review (optional) Rebuttal letters More Subjects Search articles Peer-reviewed Journals PeerJ (Life, Biological, Environmental and Health Sciences) PeerJ Computer Science PeerJ Physical Chemistry PeerJ Organic Chemistry PeerJ Inorganic Chemistry PeerJ Analytical Chemistry PeerJ Materials Science Preprints PeerJ Preprints Table of contents Table of Contents - current and archives PeerJ - Medicine articles PeerJ - Biology & Life science articles PeerJ - Environmental Science articles PeerJ - General bio (stats, legal, policy, edu) PeerJ Computer Science PeerJ Preprints Academic advisors Volunteer to review Collections Job listings Discussions Blog Institutional plans Reviews and awards Spread the word Who are we? Contact Login AUTHORS Peer Journals Overview Submission Guidelines Subject Areas Editorial Board Editorial Criteria Pricing General FAQ Computer Science FAQ Aims and Scope Author Interviews Policies and Procedures SUBMIT ARTICLE
Review History Steady state particle swarm To increase transparency, PeerJ operates a system of 'optional signed reviews and history'. This takes two forms: (1) peer reviewers are encouraged, but not required, to provide their names (if they do so, then their profile page records the articles they have reviewed), and (2) authors are given the option of reproducing their entire peer review history alongside their published article (in which case the complete peer review process is provided, including revisions, rebuttal letters and editor decision letters). New to public reviews? Learn more about optional signed reviews and how to write a better rebuttal letter .
Summary
The initial submission of this article was received on December 21st, 2018 and was peer-reviewed by 2 reviewers and the Academic Editor. The Academic Editor made their initial decision on February 6th, 2019. The first revision was submitted on April 24th, 2019 and was reviewed by 1 reviewer and the Academic Editor. The article was Accepted by the Academic Editor on June 3rd, 2019.
label_version_1
Version 0.2 (accepted)
Julian Togelius
·
Jun 3, 2019
label_recommendation_1
·
Academic Editor
Accept
I, and the reviewer, are happy with your revisions - I think this is ready to be published now.
label_author_1
Reviewer 1 ·
May 15, 2019
Basic reporting
label_br_1
no comment
Experimental design
label_ed_1
no comment
Validity of the findings
label_votf_1
no comment
Comments for the author
label_cfta_1
no comment Cite this review as
Anonymous Reviewer ( 2019 ) Peer Review #1 of "Steady state particle swarm (v0.2)" . PeerJ Computer Science https://doi.org/10.7287/peerj-cs.202v0.2/reviews/1 Download Version 0.2 (PDF)
Download author's rebuttal letter
- submitted Apr 24, 2019
label_version_2
Version 0.1 (original submission)
Julian Togelius
·
Feb 6, 2019
label_recommendation_2
·
Academic Editor
Major Revisions
While the algorithm describes a potentially interesting new PSO variant, the reviewers raise valid concerns about how it is described and how results are reported among other things. When it comes to parallelization, the authors need to either improve the presentation substantially or to cut that part out and make it another paper.
label_author_2
Reviewer 1 ·
Jan 21, 2019
Basic reporting
label_br_2
This paper proposed a steady state update strategy for PSO algorithms. The proposed algorithm was tested on a set of unimodal, multimodal, noisy and rotated benchmark functions. Finally, a parallel SS-PSO has been implemented and compared to the standard PSO. But some weakness can be observed: (1) The latest references should be cited. The review of the existing PSO algorithms is very necessary.
Experimental design
label_ed_2
(3) The results are not persuasive. Comparison with the standard PSO is not acceptable, the authors should present their results compare to related papers. Is the proposed algorithm better than other swarm algorithms? (4) The 'Mean' and 'Std' values should be provided in Table 2. (5) The convergence curves of the proposed algorithm and the other algorithms should be added.
Validity of the findings
label_votf_2
The steady state update strategy for PSO algorithm is not descrided clearly enough in the paper. So the paper is lack of innovation.
Comments for the author
label_cfta_2
This paper proposed a steady state update strategy for PSO algorithms. The proposed algorithm was tested on a set of unimodal, multimodal, noisy and rotated benchmark functions. Finally, a parallel SS-PSO has been implemented and compared to the standard PSO. But some weakness can be observed: (1) The steady state update strategy for PSO algorithm is not descrided clearly enough in the paper. So the paper is lack of innovation. (2) The latest references should be cited. The review of the existing PSO algorithms is very necessary. (3) The results are not persuasive. Comparison with the standard PSO is not acceptable, the authors should present their results compare to related papers. Is the proposed algorithm better than other swarm algorithms? (4) The 'Mean' and 'Std' values should be provided in Table 2. (5) The convergence curves of the proposed algorithm and the other algorithms should be added. Cite this review as
Anonymous Reviewer ( 2019 ) Peer Review #1 of "Steady state particle swarm (v0.1)" . PeerJ Computer Science https://doi.org/10.7287/peerj-cs.202v0.1/reviews/1
label_author_3
Reviewer 2 ·
Feb 3, 2019
Basic reporting
label_br_3
This paper address an interesting topic: A Steady State OpenMp parallel version of PSO. Authors take inspiration from SOC as applied by Bak-Sneppen to coevolving species in 1993. Authors are not only interested in the model, but also in the possibilities for parallel implementations, and their benefits. The topic address is of interest, and the paper is well-written. However, it is not clear to me why the "parallel" part of the study has been included: it is a small section of the paper, that would really require a large study and probably an additional paper. Actually, when I read the title, given the inclusion of "OpenMP parallel" I though this paper would really deal with a parallel algorithm, which is not the case. Right now it is confusing what the main goal of the paper is. If we focus on parallel versions of PSO, authors describe the problem of unbalanced distribution of particles when synchronous models are used. In other areas, load-balancing is a topic always addressed, and a wider discussion is pertinent here, given that methods and algorithms have been widely studied and are available in this area (76-80). So, the literature review should specifically address this topic. Authors state that quality of solutions and speed are the main goals, and the proposal relies in reducing the number of evaluations every time step. This is not a new idea, and has been frequently used in the context of Eas reducing fitness cases evaluations, when every individual must check a number of cases. (88-90) If this is one of the main ideas here, a review of the literature would be pertinent so that readers can understand the connection with previously published papers on the topic. On the other hand, steady state approaches are not new for population-based metaheuristics, and are also frequent in the EA literature. Nevertheless, the traditional approach is that a single population is managed, where new individuals are born, and only they are evaluated every time step, and some pass over, so that the size of the population does not change. A comparison among the approach described and the standard one should be included in the review, providing references to interested readers. (100).
Experimental design
label_ed_3
(194) A description on how the algorithms has been tested should be included: although that information is provided below (50 runs per experiment), this is the best place to include it. Given that two particular values of neighbourhoods has been tested, (5 and 9), and given that each of them require different computing time, results should also include time to solution for a better assessment of results. A wider study should include the range of neighbourhoods values so that we can understand why some values are better than others. If this is one of the main components of the algorithm, better to test them in the context of the new proposal. (283) some comments should be added about why in f1 and f3 the new proposal does not found better results. (402) the first and only time when references to tables are correctly included. Why this time are correct and previously never? (error in other cases).
Validity of the findings
label_votf_3
Although results shown for the algorithm are clear, regarding the parallelization section there are some problems that must be addressed. (416) Parallelization The topic is important enough to be addressed separately. But the information provided is quite scarce to be able to understand the implications. For instance, no information on how the parallelization has been applied is included. Authors state that run-time has been compared when using 1-8 threads. But what technology, programming library, etc, for parallelising the code has been applied? Are authors simply relying on compilers decisions? Even if the code is shared, the paper should include the required information for an occasional reader to know the details without checking the code. (434) authors refers here to parallelisation at the evaluation level. But the results in this case should provide fitness quality against time for a proper comparison. Speedup is not enough. Also comparison between time-to-solution should be included. (441) Authors state: “Unfortunately, large run time variations were observed, making it difficult to perform a direct comparison. This was to be expected, since a single unsuccessful run is enough to skew the results towards either algorithm. Repeating the test with different seeds often lead to opposing results.” This shouldn't avoid a correct comparison: maybe number of successful runs under time intervals could be used. Also, time provided can be longer thus assuring all the runs finish; or difficulty of problems increased, so that no run finish along the time studied, and quality can be analyzed along the experiment. Given the specific problems that arise when parallelisation is addressed, I suggest to remove this topic from the paper and try it as a specific topic in a future paper.
Comments for the author
I don't understand why no correct links to figures and tables are included in the paper, and instead only “Error” messages are included. Cite this review as
Anonymous Reviewer ( 2019 ) Peer Review #2 of "Steady state particle swarm (v0.1)" . PeerJ Computer Science https://doi.org/10.7287/peerj-cs.202v0.1/reviews/2 Download Original Submission (PDF)
- submitted Dec 21, 2018 All text and materials provided via this peer-review history page are made available under a Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.
About us - PeerJ team | Our publications | Benefits | Partnerships | Endorsements Awards Resources - FAQ | Careers | Pressroom | Terms of use | Privacy | Contact Academic boards - Advisors | Editors | Subject areas Follow us - PeerJ blog | Twitter | Facebook | LinkedIn | Pinterest Submission guides - PeerJ – Life and Environment | PeerJ Computer Science | PeerJ Chemistry Spread the word - Activities | Resources PeerJ feeds - Atom | RSS 1.0 | RSS 2.0 | JSON PeerJ Computer Science feeds - Atom | RSS 1.0 | RSS 2.0 | JSON Archives - PeerJ – Life and Environment | PeerJ Computer Science
©2012-2019 PeerJ, Inc | Public user content licensed CC BY 4.0 unless otherwise specified. PeerJ ISSN: 2167-8359 PeerJ Comput. Sci. ISSN: 2376-5992 PeerJ Preprints ISSN: 2167-9843
computer science
